{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gJJHwIxdohsB"
   },
   "source": [
    "**Training an image classifier**\n",
    "<br>We will do the following steps in order:\n",
    "\n",
    "Load and normalizing the CIFAR10 training and test datasets using torchvision\n",
    "<br>Define a Convolutional Neural Network\n",
    "<br>Define a loss function\n",
    "<br>Train the network on the training data\n",
    "<br>Test the network on the test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "q0kNvJZgjG4m"
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn.functional as F\n",
    "from torchvision import datasets,transforms\n",
    "from torch import nn\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "FuT0iFFGolxE"
   },
   "source": [
    "__1. Loading and normalizing CIFAR10__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 149,
     "referenced_widgets": [
      "3ec82ce2eb1c47218f7e05c544b105f7",
      "b82328568adc4bc3ad31c145b6f652c8",
      "8914c2bbe230467e85ff826886b5836a",
      "e310e36824884f68b479ee7fa95d9f71",
      "09c19c8d769946ff9ffed821a550cdb1",
      "82d771afe35e4a868c33d986c016faa3",
      "abe60f7e4fc14a53b6e0cc6fd4698dc5",
      "a4bd52ffd9a24691b16f1ae39d1afc18",
      "44f806902c1b4ea59a3582e69af191cc",
      "dfd95440390d470d9290cc03b9977ce5",
      "f63b9cd74f7e4626a04ff28f0af0ca1b",
      "4e1be90ce9fe4560a1b660e9eb360c93",
      "4b05f275e5634f01bc941140f72139f2",
      "38749eee005b47c38c964782da54bd53",
      "70ba20aa12eb4d09a58154d5dfd916c8",
      "4d01a0a400854fdf9800b4564c254ba7"
     ]
    },
    "id": "XNhzfvm-jHjQ",
    "outputId": "c566961c-d2f4-40fe-9fa0-a459f1b9f771"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3ec82ce2eb1c47218f7e05c544b105f7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Failed download. Trying https -> http instead. Downloading http://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "44f806902c1b4ea59a3582e69af191cc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting ./data/cifar-10-python.tar.gz to ./data\n",
      "Files already downloaded and verified\n"
     ]
    }
   ],
   "source": [
    "transform_train = transforms.Compose([transforms.Resize((32,32)),  #resises the image so it can be perfect for our model.\n",
    "                                      transforms.RandomHorizontalFlip(), # FLips the image w.r.t horizontal axis\n",
    "                                      transforms.RandomRotation(10),     #Rotates the image to a specified angel\n",
    "                                      transforms.RandomAffine(0, shear=10, scale=(0.8,1.2)), #Performs actions like zooms, change shear angles.\n",
    "                                      transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2), # Set the color params\n",
    "                                      transforms.ToTensor(), # comvert the image to tensor so that it can work with torch\n",
    "                                      transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)) #Normalize all the images\n",
    "                               ])\n",
    " \n",
    " \n",
    "transform = transforms.Compose([transforms.Resize((32,32)),\n",
    "                               transforms.ToTensor(),\n",
    "                               transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
    "                               ])\n",
    "training_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train) # Data augmentation is only done on training images\n",
    "validation_dataset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n",
    " \n",
    "training_loader = torch.utils.data.DataLoader(training_dataset, batch_size=100, shuffle=True) # Batch size of 100 i.e to work with 100 images at a time\n",
    "validation_loader = torch.utils.data.DataLoader(validation_dataset, batch_size = 100, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "qDQ8oRpwjShF"
   },
   "outputs": [],
   "source": [
    "# We need to convert the images to numpy arrays as tensors are not compatible with matplotlib.\n",
    "def im_convert(tensor):  \n",
    "  image = tensor.cpu().clone().detach().numpy() # This process will happen in normal cpu.\n",
    "  image = image.transpose(1, 2, 0)\n",
    "  image = image * np.array((0.5, 0.5, 0.5)) + np.array((0.5, 0.5, 0.5))\n",
    "  image = image.clip(0, 1)\n",
    "  return image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "9slMwAVTjVO4"
   },
   "outputs": [],
   "source": [
    "# Different classes in CIPHAR 10 dataset. \n",
    "classes = ('airplane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 268
    },
    "id": "wH-rSwuIjXzq",
    "outputId": "76648911-354f-434e-85fa-f17e2a7e54fa"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x288 with 20 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We iter the batch of images to display\n",
    "dataiter = iter(training_loader) # converting our train_dataloader to iterable so that we can iter through it. \n",
    "images, labels = dataiter.next() #going from 1st batch of 100 images to the next batch\n",
    "fig = plt.figure(figsize=(25, 4)) \n",
    "\n",
    "# We plot 20 images from our train_dataset\n",
    "for idx in np.arange(20):\n",
    "  ax = fig.add_subplot(2, 10, idx+1, xticks=[], yticks=[]) \n",
    "  plt.imshow(im_convert(images[idx])) #converting to numpy array as plt needs it.\n",
    "  ax.set_title(classes[labels[idx].item()])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VV0gS0boouFI"
   },
   "source": [
    "__2. Define a Convolutional Neural Network__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "Szl51cEXjadB"
   },
   "outputs": [],
   "source": [
    "class LeNet(nn.Module):\n",
    "    def __init__(self):\n",
    "      super().__init__()\n",
    "      self.conv1 = nn.Conv2d(3, 16, 3, 1, padding=1) # input is color image, hence 3 i/p channels. 16 filters, kernal size is tuned to 3 to avoid overfitting, stride is 1 , padding is 1 extract all edge features.\n",
    "      self.conv2 = nn.Conv2d(16, 32, 3, 1, padding=1) # We double the feature maps for every conv layer as in pratice it is really good.\n",
    "      self.conv3 = nn.Conv2d(32, 64, 3, 1, padding=1)\n",
    "      self.fc1 = nn.Linear(4*4*64, 500) # I/p image size is 32*32, after 3 MaxPooling layers it reduces to 4*4 and 64 because our last conv layer has 64 outputs. Output nodes is 500\n",
    "      self.dropout1 = nn.Dropout(0.5)\n",
    "      self.fc2 = nn.Linear(500, 10) # output nodes are 10 because our dataset have 10 different categories\n",
    "    def forward(self, x):\n",
    "      x = F.relu(self.conv1(x)) #Apply relu to each output of conv layer.\n",
    "      x = F.max_pool2d(x, 2, 2) # Max pooling layer with kernal of 2 and stride of 2\n",
    "      x = F.relu(self.conv2(x))\n",
    "      x = F.max_pool2d(x, 2, 2)\n",
    "      x = F.relu(self.conv3(x))\n",
    "      x = F.max_pool2d(x, 2, 2)\n",
    "      x = x.view(-1, 4*4*64) # flatten our images to 1D to input it to the fully connected layers\n",
    "      x = F.relu(self.fc1(x))\n",
    "      x = self.dropout1(x) # Applying dropout b/t layers which exchange highest parameters. This is a good practice\n",
    "      x = self.fc2(x)\n",
    "      return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YPHvj9tTjc_Y",
    "outputId": "046d3c20-a028-4dea-aefc-19c4f73e5eb8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LeNet(\n",
       "  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "  (conv2): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "  (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
       "  (fc1): Linear(in_features=1024, out_features=500, bias=True)\n",
       "  (dropout1): Dropout(p=0.5, inplace=False)\n",
       "  (fc2): Linear(in_features=500, out_features=10, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 11,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LeNet() # run our model \n",
    "model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VKDzOwJOo2ld"
   },
   "source": [
    "__3.Define a Loss function and optimizer__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "id": "UW4dBrgFjgQ8"
   },
   "outputs": [],
   "source": [
    "criterion = nn.CrossEntropyLoss() # same as categorical_crossentropy loss used in Keras models which runs on Tensorflow\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr = 0.001) # fine tuned the lr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zlLDCwFUpRfs"
   },
   "source": [
    "__4. Train the neural network__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "UMCJJmCVjiWw",
    "outputId": "63690f44-591a-4a47-e118-22b914688bb9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch : 1\n",
      "training loss: 1.6794, acc 38.3700 \n",
      "validation loss: 1.3836, validation acc 49.4900 \n",
      "epoch : 2\n",
      "training loss: 1.3844, acc 50.3240 \n",
      "validation loss: 1.2248, validation acc 56.7900 \n",
      "epoch : 3\n",
      "training loss: 1.2606, acc 54.9180 \n",
      "validation loss: 1.1372, validation acc 59.5100 \n",
      "epoch : 4\n",
      "training loss: 1.1625, acc 58.7280 \n",
      "validation loss: 1.0849, validation acc 61.5800 \n",
      "epoch : 5\n",
      "training loss: 1.0969, acc 61.2040 \n",
      "validation loss: 0.9520, validation acc 66.1500 \n",
      "epoch : 6\n",
      "training loss: 1.0476, acc 63.0260 \n",
      "validation loss: 0.9381, validation acc 66.9800 \n",
      "epoch : 7\n",
      "training loss: 0.9979, acc 64.8820 \n",
      "validation loss: 0.9130, validation acc 68.0000 \n",
      "epoch : 8\n",
      "training loss: 0.9648, acc 66.2380 \n",
      "validation loss: 0.8627, validation acc 70.0300 \n",
      "epoch : 9\n",
      "training loss: 0.9391, acc 66.8880 \n",
      "validation loss: 0.8688, validation acc 69.3900 \n",
      "epoch : 10\n",
      "training loss: 0.9161, acc 67.8800 \n",
      "validation loss: 0.8629, validation acc 70.5500 \n",
      "epoch : 11\n",
      "training loss: 0.8977, acc 68.6080 \n",
      "validation loss: 0.8396, validation acc 70.6200 \n",
      "epoch : 12\n",
      "training loss: 0.8768, acc 69.3280 \n",
      "validation loss: 0.8238, validation acc 71.8000 \n",
      "epoch : 13\n",
      "training loss: 0.8664, acc 69.7040 \n",
      "validation loss: 0.7949, validation acc 72.1000 \n",
      "epoch : 14\n",
      "training loss: 0.8468, acc 70.3500 \n",
      "validation loss: 0.7955, validation acc 72.3000 \n",
      "epoch : 15\n",
      "training loss: 0.8381, acc 70.7500 \n",
      "validation loss: 0.7856, validation acc 72.7200 \n"
     ]
    }
   ],
   "source": [
    "epochs = 15\n",
    "running_loss_history = []\n",
    "running_corrects_history = []\n",
    "val_running_loss_history = []\n",
    "val_running_corrects_history = []\n",
    "\n",
    "for e in range(epochs): # training our model, put input according to every batch.\n",
    "  \n",
    "  running_loss = 0.0\n",
    "  running_corrects = 0.0\n",
    "  val_running_loss = 0.0\n",
    "  val_running_corrects = 0.0\n",
    "  \n",
    "  for inputs, labels in training_loader:\n",
    "    outputs = model(inputs) # every batch of 100 images are put as an input.\n",
    "    loss = criterion(outputs, labels) # Calc loss after each batch i/p by comparing it to actual labels. \n",
    "    \n",
    "    optimizer.zero_grad() #setting the initial gradient to 0\n",
    "    loss.backward() # backpropagating the loss\n",
    "    optimizer.step() # updating the weights and bias values for every single step.\n",
    "    \n",
    "    _, preds = torch.max(outputs, 1) # taking the highest value of prediction.\n",
    "    running_loss += loss.item()\n",
    "    running_corrects += torch.sum(preds == labels.data) # calculating te accuracy by taking the sum of all the correct predictions in a batch.\n",
    "\n",
    "  else:\n",
    "    with torch.no_grad(): # we do not need gradient for validation.\n",
    "      for val_inputs, val_labels in validation_loader:\n",
    "        val_outputs = model(val_inputs)\n",
    "        val_loss = criterion(val_outputs, val_labels)\n",
    "        \n",
    "        _, val_preds = torch.max(val_outputs, 1)\n",
    "        val_running_loss += val_loss.item()\n",
    "        val_running_corrects += torch.sum(val_preds == val_labels.data)\n",
    "      \n",
    "    epoch_loss = running_loss/len(training_loader) # loss per epoch\n",
    "    epoch_acc = running_corrects.float()/ len(training_loader) # accuracy per epoch\n",
    "    running_loss_history.append(epoch_loss) # appending for displaying \n",
    "    running_corrects_history.append(epoch_acc)\n",
    "    \n",
    "    val_epoch_loss = val_running_loss/len(validation_loader)\n",
    "    val_epoch_acc = val_running_corrects.float()/ len(validation_loader)\n",
    "    val_running_loss_history.append(val_epoch_loss)\n",
    "    val_running_corrects_history.append(val_epoch_acc)\n",
    "    print('epoch :', (e+1))\n",
    "    print('training loss: {:.4f}, acc {:.4f} '.format(epoch_loss, epoch_acc.item()))\n",
    "    print('validation loss: {:.4f}, validation acc {:.4f} '.format(val_epoch_loss, val_epoch_acc.item()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 282
    },
    "id": "4my9EiKkp3Jj",
    "outputId": "b28c86f7-f762-4a3b-c863-301a81638985"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f946b2fed30>"
      ]
     },
     "execution_count": 15,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('ggplot')\n",
    "plt.plot(running_loss_history, label='training loss')\n",
    "plt.plot(val_running_loss_history, label='validation loss')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 282
    },
    "id": "bLzE9EUWp7od",
    "outputId": "577ed3a1-9085-436e-bba9-7ebe4dbe9f97"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f946b114d30>"
      ]
     },
     "execution_count": 16,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('ggplot')\n",
    "plt.plot(running_corrects_history, label='training accuracy')\n",
    "plt.plot(val_running_corrects_history, label='validation accuracy')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TOV8KtCZmsIM"
   },
   "source": [
    "__VGG__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "gWv3SQaumu01"
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load in \n",
    "from keras.applications.vgg19 import VGG19\n",
    "from keras.models import Sequential\n",
    "from keras.utils import to_categorical\n",
    "from keras.layers import Dense,Flatten\n",
    "from keras.datasets import cifar10\n",
    "import cv2\n",
    "from keras import backend as K\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.optimizers import SGD\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "-uhW0utXnoEZ"
   },
   "outputs": [],
   "source": [
    "(x_train,y_train),(x_test,y_test) = cifar10.load_data() # load the data \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "is8SU0L-nqJN"
   },
   "outputs": [],
   "source": [
    "numberOfClass = 2000\n",
    "y_train = to_categorical(y_train,numberOfClass)# y train and y test transform to categorical type\n",
    "y_test = to_categorical(y_test,numberOfClass)\n",
    "input_shape = x_train.shape[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 248
    },
    "id": "vo3YMFbynq0v",
    "outputId": "641caab0-dfa4-4055-de36-0b6c3db5b421"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualize \n",
    "plt.imshow(x_train[3119].astype(np.uint8)) #3119 is random number \n",
    "plt.axis(\"off\") # close the axis\n",
    "plt.show()\n",
    "#this img shape is 32,32,3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "gX7Dg-QznuSJ"
   },
   "outputs": [],
   "source": [
    "#increase dimension\n",
    "def resize_img(img):\n",
    "    numberOfImage = img.shape[0]\n",
    "    new_array = np.zeros((numberOfImage,48,48,3))# first img shape is 32,32,3 but we want shape 48,48,3 \n",
    "    for i in range(numberOfImage):\n",
    "        new_array[i] = cv2.resize(img[i,:,:,:],(48,48))\n",
    "    return new_array\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "I7wK3zYcnwcn"
   },
   "outputs": [],
   "source": [
    "x_train = resize_img(x_train)\n",
    "x_test = resize_img(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 248
    },
    "id": "LLUgj62Gny7B",
    "outputId": "f8aa0689-ce46-4f8f-fc75-771b9981a619"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.imshow(x_train[3119].astype(np.uint8)) #3119 is random number \n",
    "plt.axis(\"off\") # close the axis\n",
    "plt.show()\n",
    "# And this img shape is 48,48,3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "iJXORepSn1sw",
    "outputId": "a90e2312-b9f1-4b00-e120-068feb59a94d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg19/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
      "80142336/80134624 [==============================] - 0s 0us/step\n"
     ]
    }
   ],
   "source": [
    "#VGG19\n",
    "vgg19 = VGG19(include_top = False, weights = \"imagenet\",input_shape = (48,48,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kHRAuAYcn383",
    "outputId": "fed6d8b1-9649-4529-dbb1-a3483591818d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"vgg19\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_1 (InputLayer)         [(None, 48, 48, 3)]       0         \n",
      "_________________________________________________________________\n",
      "block1_conv1 (Conv2D)        (None, 48, 48, 64)        1792      \n",
      "_________________________________________________________________\n",
      "block1_conv2 (Conv2D)        (None, 48, 48, 64)        36928     \n",
      "_________________________________________________________________\n",
      "block1_pool (MaxPooling2D)   (None, 24, 24, 64)        0         \n",
      "_________________________________________________________________\n",
      "block2_conv1 (Conv2D)        (None, 24, 24, 128)       73856     \n",
      "_________________________________________________________________\n",
      "block2_conv2 (Conv2D)        (None, 24, 24, 128)       147584    \n",
      "_________________________________________________________________\n",
      "block2_pool (MaxPooling2D)   (None, 12, 12, 128)       0         \n",
      "_________________________________________________________________\n",
      "block3_conv1 (Conv2D)        (None, 12, 12, 256)       295168    \n",
      "_________________________________________________________________\n",
      "block3_conv2 (Conv2D)        (None, 12, 12, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_conv3 (Conv2D)        (None, 12, 12, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_conv4 (Conv2D)        (None, 12, 12, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_pool (MaxPooling2D)   (None, 6, 6, 256)         0         \n",
      "_________________________________________________________________\n",
      "block4_conv1 (Conv2D)        (None, 6, 6, 512)         1180160   \n",
      "_________________________________________________________________\n",
      "block4_conv2 (Conv2D)        (None, 6, 6, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block4_conv3 (Conv2D)        (None, 6, 6, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block4_conv4 (Conv2D)        (None, 6, 6, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block4_pool (MaxPooling2D)   (None, 3, 3, 512)         0         \n",
      "_________________________________________________________________\n",
      "block5_conv1 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv2 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv3 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv4 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_pool (MaxPooling2D)   (None, 1, 1, 512)         0         \n",
      "=================================================================\n",
      "Total params: 20,024,384\n",
      "Trainable params: 20,024,384\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(vgg19.summary())\n",
    "# Son satır MaxPooling2D bundan sonra fuly con layers flatten dense olmalıydı .include_top = False bunları çıkartır.\n",
    "#Transfer learningde genelde bunlar  çıkartılır\n",
    "\n",
    "# Last line MaxPooling2D should now be fuly con layers flatten dense .include_top = False removes them.\n",
    "#Transfer learning is usually removed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "LqCraWZ1n_dN",
    "outputId": "b07387d7-1409-4602-ec15-760d8f65d387"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[<tensorflow.python.keras.engine.input_layer.InputLayer object at 0x7fccfb8093c8>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccfb77a390>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccfb77af60>, <tensorflow.python.keras.layers.pooling.MaxPooling2D object at 0x7fccfaef3748>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccfaefe6a0>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccfaefe320>, <tensorflow.python.keras.layers.pooling.MaxPooling2D object at 0x7fccfaf07dd8>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccfaf10a90>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccfaf07b00>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccfaf16d68>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccf0237470>, <tensorflow.python.keras.layers.pooling.MaxPooling2D object at 0x7fccf0231e10>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccf0231668>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccf023ff60>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccf024b668>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccf024bc18>, <tensorflow.python.keras.layers.pooling.MaxPooling2D object at 0x7fccf0231860>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccf0259470>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccf02590f0>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccf025e908>, <tensorflow.python.keras.layers.convolutional.Conv2D object at 0x7fccf0264c50>, <tensorflow.python.keras.layers.pooling.MaxPooling2D object at 0x7fccf026cac8>]\n"
     ]
    }
   ],
   "source": [
    "vgg19_layer_list =vgg19.layers\n",
    "print(vgg19_layer_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "OcOsDxnxoCBW",
    "outputId": "f9435c46-ce1a-4987-d4d1-99585d648aec"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "block1_conv1 (Conv2D)        (None, 48, 48, 64)        1792      \n",
      "_________________________________________________________________\n",
      "block1_conv2 (Conv2D)        (None, 48, 48, 64)        36928     \n",
      "_________________________________________________________________\n",
      "block1_pool (MaxPooling2D)   (None, 24, 24, 64)        0         \n",
      "_________________________________________________________________\n",
      "block2_conv1 (Conv2D)        (None, 24, 24, 128)       73856     \n",
      "_________________________________________________________________\n",
      "block2_conv2 (Conv2D)        (None, 24, 24, 128)       147584    \n",
      "_________________________________________________________________\n",
      "block2_pool (MaxPooling2D)   (None, 12, 12, 128)       0         \n",
      "_________________________________________________________________\n",
      "block3_conv1 (Conv2D)        (None, 12, 12, 256)       295168    \n",
      "_________________________________________________________________\n",
      "block3_conv2 (Conv2D)        (None, 12, 12, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_conv3 (Conv2D)        (None, 12, 12, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_conv4 (Conv2D)        (None, 12, 12, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_pool (MaxPooling2D)   (None, 6, 6, 256)         0         \n",
      "_________________________________________________________________\n",
      "block4_conv1 (Conv2D)        (None, 6, 6, 512)         1180160   \n",
      "_________________________________________________________________\n",
      "block4_conv2 (Conv2D)        (None, 6, 6, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block4_conv3 (Conv2D)        (None, 6, 6, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block4_conv4 (Conv2D)        (None, 6, 6, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block4_pool (MaxPooling2D)   (None, 3, 3, 512)         0         \n",
      "_________________________________________________________________\n",
      "block5_conv1 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv2 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv3 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv4 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_pool (MaxPooling2D)   (None, 1, 1, 512)         0         \n",
      "=================================================================\n",
      "Total params: 20,024,384\n",
      "Trainable params: 20,024,384\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "for layer in vgg19_layer_list:\n",
    "    model.add(layer)\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "id": "XI39Rm0yoFFI"
   },
   "outputs": [],
   "source": [
    "#transfer learning\n",
    "for layer in model.layers:\n",
    "    layer.trainable = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "p3xIcaF4oF3t",
    "outputId": "890f835a-01fb-4c1b-ac3f-a9bf5ba0fbac"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "block1_conv1 (Conv2D)        (None, 48, 48, 64)        1792      \n",
      "_________________________________________________________________\n",
      "block1_conv2 (Conv2D)        (None, 48, 48, 64)        36928     \n",
      "_________________________________________________________________\n",
      "block1_pool (MaxPooling2D)   (None, 24, 24, 64)        0         \n",
      "_________________________________________________________________\n",
      "block2_conv1 (Conv2D)        (None, 24, 24, 128)       73856     \n",
      "_________________________________________________________________\n",
      "block2_conv2 (Conv2D)        (None, 24, 24, 128)       147584    \n",
      "_________________________________________________________________\n",
      "block2_pool (MaxPooling2D)   (None, 12, 12, 128)       0         \n",
      "_________________________________________________________________\n",
      "block3_conv1 (Conv2D)        (None, 12, 12, 256)       295168    \n",
      "_________________________________________________________________\n",
      "block3_conv2 (Conv2D)        (None, 12, 12, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_conv3 (Conv2D)        (None, 12, 12, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_conv4 (Conv2D)        (None, 12, 12, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_pool (MaxPooling2D)   (None, 6, 6, 256)         0         \n",
      "_________________________________________________________________\n",
      "block4_conv1 (Conv2D)        (None, 6, 6, 512)         1180160   \n",
      "_________________________________________________________________\n",
      "block4_conv2 (Conv2D)        (None, 6, 6, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block4_conv3 (Conv2D)        (None, 6, 6, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block4_conv4 (Conv2D)        (None, 6, 6, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block4_pool (MaxPooling2D)   (None, 3, 3, 512)         0         \n",
      "_________________________________________________________________\n",
      "block5_conv1 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv2 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv3 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv4 (Conv2D)        (None, 3, 3, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_pool (MaxPooling2D)   (None, 1, 1, 512)         0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 1024)              525312    \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 2000)              2050000   \n",
      "=================================================================\n",
      "Total params: 22,599,696\n",
      "Trainable params: 2,575,312\n",
      "Non-trainable params: 20,024,384\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "#fuly con layers\n",
    "model.add(Flatten())\n",
    "model.add(Dense(1024))\n",
    "model.add(Dense(numberOfClass, activation=\"softmax\"))\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "5qd85MxdoKWq"
   },
   "outputs": [],
   "source": [
    "#compile part\n",
    "model.compile( loss = \"categorical_crossentropy\", optimizer =\"rmsprop\", metrics =[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "LhT_dvIzoMhj",
    "outputId": "72a56b0a-5456-448c-9518-024cae2aa36d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n",
      "40/40 [==============================] - 23s 348ms/step - loss: 14.1839 - accuracy: 0.3460 - val_loss: 6.6385 - val_accuracy: 0.4562\n",
      "Epoch 2/15\n",
      "40/40 [==============================] - 14s 349ms/step - loss: 5.2861 - accuracy: 0.4821 - val_loss: 3.8373 - val_accuracy: 0.4684\n",
      "Epoch 3/15\n",
      "40/40 [==============================] - 14s 357ms/step - loss: 3.6915 - accuracy: 0.5041 - val_loss: 3.4345 - val_accuracy: 0.4910\n",
      "Epoch 4/15\n",
      "40/40 [==============================] - 15s 370ms/step - loss: 3.0606 - accuracy: 0.5092 - val_loss: 1.9282 - val_accuracy: 0.5534\n",
      "Epoch 5/15\n",
      "40/40 [==============================] - 15s 387ms/step - loss: 2.2561 - accuracy: 0.5215 - val_loss: 1.8221 - val_accuracy: 0.5355\n",
      "Epoch 6/15\n",
      "40/40 [==============================] - 15s 385ms/step - loss: 1.7659 - accuracy: 0.5338 - val_loss: 1.4999 - val_accuracy: 0.5447\n",
      "Epoch 7/15\n",
      "40/40 [==============================] - 15s 370ms/step - loss: 1.5608 - accuracy: 0.5389 - val_loss: 2.1661 - val_accuracy: 0.4630\n",
      "Epoch 8/15\n",
      "40/40 [==============================] - 15s 365ms/step - loss: 1.5344 - accuracy: 0.5410 - val_loss: 1.4603 - val_accuracy: 0.5345\n",
      "Epoch 9/15\n",
      "40/40 [==============================] - 15s 367ms/step - loss: 1.5164 - accuracy: 0.5345 - val_loss: 1.3793 - val_accuracy: 0.5490\n",
      "Epoch 10/15\n",
      "40/40 [==============================] - 15s 373ms/step - loss: 1.4251 - accuracy: 0.5599 - val_loss: 1.2463 - val_accuracy: 0.5950\n",
      "Epoch 11/15\n",
      "40/40 [==============================] - 15s 375ms/step - loss: 1.2562 - accuracy: 0.5892 - val_loss: 1.3804 - val_accuracy: 0.5515\n",
      "Epoch 12/15\n",
      "40/40 [==============================] - 15s 374ms/step - loss: 1.3531 - accuracy: 0.5613 - val_loss: 2.4407 - val_accuracy: 0.4784\n",
      "Epoch 13/15\n",
      "40/40 [==============================] - 15s 371ms/step - loss: 1.4193 - accuracy: 0.5777 - val_loss: 1.3404 - val_accuracy: 0.5572\n",
      "Epoch 14/15\n",
      "40/40 [==============================] - 15s 370ms/step - loss: 1.2985 - accuracy: 0.5701 - val_loss: 1.4028 - val_accuracy: 0.5555\n",
      "Epoch 15/15\n",
      "40/40 [==============================] - 15s 371ms/step - loss: 1.3163 - accuracy: 0.5642 - val_loss: 1.3066 - val_accuracy: 0.5713\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(x_train ,y_train, validation_split= 0.2 , epochs = 15, batch_size = 1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 513
    },
    "id": "sBNIhuQkoV0N",
    "outputId": "bc636ad2-0fe7-4114-d625-85942807af80"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#visualize\n",
    "plt.plot(history.history[\"loss\"], label = \"train loss\")\n",
    "plt.plot(history.history[\"val_loss\"], label = \"val loss\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "plt.figure()\n",
    "plt.plot(history.history[\"accuracy\"], label = \"train acc\")\n",
    "plt.plot(history.history[\"val_accuracy\"], label = \"val acc\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "AN8008 Individual assign_SHAO XIAODAN.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "09c19c8d769946ff9ffed821a550cdb1": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": "initial"
     }
    },
    "38749eee005b47c38c964782da54bd53": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "3ec82ce2eb1c47218f7e05c544b105f7": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_8914c2bbe230467e85ff826886b5836a",
       "IPY_MODEL_e310e36824884f68b479ee7fa95d9f71"
      ],
      "layout": "IPY_MODEL_b82328568adc4bc3ad31c145b6f652c8"
     }
    },
    "44f806902c1b4ea59a3582e69af191cc": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_f63b9cd74f7e4626a04ff28f0af0ca1b",
       "IPY_MODEL_4e1be90ce9fe4560a1b660e9eb360c93"
      ],
      "layout": "IPY_MODEL_dfd95440390d470d9290cc03b9977ce5"
     }
    },
    "4b05f275e5634f01bc941140f72139f2": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": "initial"
     }
    },
    "4d01a0a400854fdf9800b4564c254ba7": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "4e1be90ce9fe4560a1b660e9eb360c93": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_4d01a0a400854fdf9800b4564c254ba7",
      "placeholder": "​",
      "style": "IPY_MODEL_70ba20aa12eb4d09a58154d5dfd916c8",
      "value": " 170500096/? [00:29&lt;00:00, 24421964.52it/s]"
     }
    },
    "70ba20aa12eb4d09a58154d5dfd916c8": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "82d771afe35e4a868c33d986c016faa3": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "8914c2bbe230467e85ff826886b5836a": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "info",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_82d771afe35e4a868c33d986c016faa3",
      "max": 1,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_09c19c8d769946ff9ffed821a550cdb1",
      "value": 0
     }
    },
    "a4bd52ffd9a24691b16f1ae39d1afc18": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "abe60f7e4fc14a53b6e0cc6fd4698dc5": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "b82328568adc4bc3ad31c145b6f652c8": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "dfd95440390d470d9290cc03b9977ce5": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "e310e36824884f68b479ee7fa95d9f71": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_a4bd52ffd9a24691b16f1ae39d1afc18",
      "placeholder": "​",
      "style": "IPY_MODEL_abe60f7e4fc14a53b6e0cc6fd4698dc5",
      "value": " 0/? [00:00&lt;?, ?it/s]"
     }
    },
    "f63b9cd74f7e4626a04ff28f0af0ca1b": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "info",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_38749eee005b47c38c964782da54bd53",
      "max": 1,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_4b05f275e5634f01bc941140f72139f2",
      "value": 1
     }
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
